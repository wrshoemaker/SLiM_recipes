// Keywords: nonWF, non-Wright-Fisher, Wright-Fisher, non-overlapping generations, discrete generations, random mating

initialize() {
	initializeSLiMModelType("nonWF");
	initializeMutationType("m1", 0.5, "f", 0); // neutral DFE
  	initializeMutationType("m2", 0.5, "f", 0.01); // beneficial DFE
  	initializeMutationType("m3", 0.5, "f", -0.01); // deleterious DFE

  	//m1.convertToSubstitution = T;

  	// Now I initialize the coding element with 2/3 non-synonymous and 1/3 synonymous
	initializeGenomicElementType("g1", c(m1, m2, m3), c(0.5,0.25,0.25));
	//initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 9999);
	initializeMutationRate(1e-7);
	initializeRecombinationRate(1e-4);
}
reproduction() {
	K = sim.getValue("K");
	for (i in seqLen(K))
	{
		firstParent = p1.sampleIndividuals(1);
		secondParent = p1.sampleIndividuals(1, exclude=firstParent);
		p1.addCrossed(firstParent, secondParent);
	}
	self.active = 0;
}
1 early() {
	sim.setValue("K", 500);
	sim.addSubpop("p1", sim.getValue("K"));
}
early()
{
	inds = sim.subpopulations.individuals;
	inds[inds.age > 0].fitnessScaling = 0.0;
}

late() {
// remove any new mutations added to the disabled diploid genomes
sim.subpopulations.individuals.genome2.removeMutations();

// remove mutations in the haploid genomes that have fixed
  muts = sim.mutationsOfType(m1);
  freqs = sim.mutationFrequencies(NULL, muts);
if (any(freqs == 0.5))
  sim.subpopulations.genomes.removeMutations(muts[freqs == 0.5], T);
}

10000 late()  { sim.outputFull(); }
