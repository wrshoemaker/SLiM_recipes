// set up a simulation
initialize()
{
  initializeSLiMModelType("nonWF");
  defineConstant("K", 500);	// carrying capacity
  initializeMutationRate(1e-08);
  defineConstant("H", 0.001);                    // HGT probability
  defineConstant("G", 1e8);  // genome length
  defineConstant("l", 1e3);  // recombinant length

  initializeMutationType("m1", 0.5, "f", 0); // neutral DFE
  initializeMutationType("m2", 0.5, "f", 0.1); // beneficial DFE
  initializeMutationType("m3", 0.5, "f", -0.1); // deleterious DFE

  // Now I initialize the coding element with 2/3 non-synonymous and 1/3 synonymous
	initializeGenomicElementType("g1", c(m1, m2, m3), c(0.5,0.25,0.25));
  // so neutral mutation rate = fraction neutral sites * mutation rate

  initializeGenomicElement(g1, 0, G-1);

  initializeRecombinationRate(0);                // no recombination

  // to-do, incorporate HGT

}

reproduction() {
	if (runif(1) < H)
	{
		// horizontal gene transfer from a randomly chosen individual
		HGTsource = p1.sampleIndividuals(1, exclude=individual).genome1;

		// draw one locations between zero and G-l;
    // add l and that's your recombinant region
		// do break = rdunif(1, max=G-l);
    hgt_start = rdunif(1, max=G-l);
    breaks = c(hgt_start[0], hgt_start[0]+l);

		//while (breaks[0] == breaks[1]);

		// HGT from breaks[0] forward to breaks[1] on a circular chromosome
		//if (breaks[0] > breaks[1])
		//	breaks = c(0, breaks[1], breaks[0]);

		subpop.addRecombinant(genome1, HGTsource, breaks, NULL, NULL, NULL);
	}
	else
	{
		// no horizontal gene transfer; clonal replication
		subpop.addRecombinant(genome1, NULL, NULL, NULL, NULL, NULL);
	}
}


1 early() {
  sim.setValue("K", 500);
  sim.addSubpop("p1", sim.getValue("K"));
}

early()
{
 inds = sim.subpopulations.individuals;
 inds[inds.age > 0].fitnessScaling = 0.0;
}
10000 late() { sim.outputFixedMutations(); }



late() {
	// detect fixation/loss of the beneficial mutations
	muts = sim.mutations;
	freqs = sim.mutationFrequencies(NULL, muts);

	if (all(freqs == 0.5))
	{
		catn(sim.generation + ": " + sum(freqs == 0.5) + " fixed.");
		sim.simulationFinished();
	}
}

// output samples of 10 genomes periodically, all fixed mutations at end
//1000 late() { p1.outputSample(10); }
//2000 late() { p1.outputSample(10); }
//2000 late() { sim.outputFixedMutations(); }


//100000 late() { catn(sim.generation + ": no result."); }
